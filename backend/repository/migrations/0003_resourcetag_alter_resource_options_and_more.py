# Generated by Django 5.2.6 on 2025-10-28 17:28

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('repository', '0002_alter_resource_kind'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ResourceTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Icon identifier for the frontend', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterModelOptions(
            name='resource',
            options={'ordering': ['category__order', 'order_in_category', 'title']},
        ),
        migrations.AddField(
            model_name='resource',
            name='content_warnings',
            field=models.TextField(blank=True, help_text='Any content warnings or prerequisites'),
        ),
        migrations.AddField(
            model_name='resource',
            name='difficulty_level',
            field=models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20),
        ),
        migrations.AddField(
            model_name='resource',
            name='duration_seconds',
            field=models.PositiveIntegerField(blank=True, help_text='Duration for audio/video content', null=True),
        ),
        migrations.AddField(
            model_name='resource',
            name='has_captions',
            field=models.BooleanField(default=False, help_text='Whether video/audio has captions'),
        ),
        migrations.AddField(
            model_name='resource',
            name='has_sign_language',
            field=models.BooleanField(default=False, help_text='Whether video has sign language'),
        ),
        migrations.AddField(
            model_name='resource',
            name='high_contrast_url',
            field=models.URLField(blank=True, help_text='URL to high contrast version if available'),
        ),
        migrations.AddField(
            model_name='resource',
            name='order_in_category',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='resource',
            name='recommended_breaks',
            field=models.JSONField(blank=True, help_text='Suggested break points in seconds', null=True),
        ),
        migrations.AddField(
            model_name='resource',
            name='requires_parent',
            field=models.BooleanField(default=False, help_text='Whether parent supervision is recommended'),
        ),
        migrations.AddField(
            model_name='resource',
            name='requires_sound',
            field=models.BooleanField(default=False, help_text='Whether sound is essential for this resource'),
        ),
        migrations.AddField(
            model_name='resource',
            name='requires_teacher',
            field=models.BooleanField(default=False, help_text='Whether teacher guidance is recommended'),
        ),
        migrations.AddField(
            model_name='resource',
            name='simplified_text_url',
            field=models.URLField(blank=True, help_text='URL to simplified language version if available'),
        ),
        migrations.AddField(
            model_name='resource',
            name='voice_description',
            field=models.TextField(blank=True, help_text='Simple description to be read by TTS'),
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('icon', models.CharField(blank=True, help_text='Icon identifier for the frontend', max_length=50)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='repository.resourcecategory')),
            ],
            options={
                'verbose_name_plural': 'Resource categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resources', to='repository.resourcecategory'),
        ),
        migrations.AddField(
            model_name='resource',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='resources', to='repository.resourcetag'),
        ),
        migrations.CreateModel(
            name='ResourceFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed', models.BooleanField(default=False)),
                ('completion_time', models.PositiveIntegerField(blank=True, help_text='Time taken in seconds', null=True)),
                ('difficulty_rating', models.PositiveSmallIntegerField(blank=True, help_text='1-5 scale', null=True)),
                ('enjoyment_rating', models.PositiveSmallIntegerField(blank=True, help_text='1-5 scale', null=True)),
                ('voice_feedback', models.FileField(blank=True, upload_to='feedback/voice/')),
                ('voice_feedback_transcript', models.TextField(blank=True)),
                ('was_accessible', models.BooleanField(help_text='Whether student found content accessible', null=True)),
                ('accessibility_issues', models.TextField(blank=True)),
                ('needed_help', models.BooleanField(default=False)),
                ('helper', models.CharField(blank=True, help_text='Who helped (parent/teacher/none)', max_length=50)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='repository.resource')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='resource_feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('resource', 'student')},
            },
        ),
    ]
