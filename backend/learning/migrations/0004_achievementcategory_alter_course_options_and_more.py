# Generated by Django 5.2.6 on 2025-10-28 17:28

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_department'),
        ('learning', '0003_attendanceevent'),
        ('repository', '0003_resourcetag_alter_resource_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AchievementCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(help_text='Icon identifier for the frontend', max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Achievement categories',
                'ordering': ['name'],
            },
        ),
        migrations.AlterModelOptions(
            name='course',
            options={'ordering': ['code'], 'permissions': [('approve_course', 'Can approve course'), ('assign_lecturer', 'Can assign lecturer to course')]},
        ),
        migrations.RemoveField(
            model_name='course',
            name='owner',
        ),
        migrations.AddField(
            model_name='course',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='core.department'),
        ),
        migrations.AddField(
            model_name='course',
            name='lecturer',
            field=models.ForeignKey(limit_choices_to={'role': 'lecturer'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taught_courses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='status',
            field=models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('active', 'Active'), ('archived', 'Archived')], default='draft', max_length=20),
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('icon', models.CharField(help_text='Icon identifier for the frontend', max_length=50)),
                ('points', models.PositiveIntegerField(default=10)),
                ('max_claims_per_term', models.PositiveIntegerField(default=3, help_text='Maximum times this achievement can be claimed per term')),
                ('requires_approval', models.BooleanField(default=False)),
                ('auto_approve_conditions', models.JSONField(blank=True, help_text='Conditions for automatic approval in JSON format', null=True)),
                ('voice_message', models.TextField(help_text='Encouraging message to speak when achievement is earned')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='learning.achievementcategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity_type', models.CharField(choices=[('resource_view', 'Resource View'), ('assignment_work', 'Assignment Work'), ('voice_practice', 'Voice Practice'), ('quiz_attempt', 'Quiz Attempt'), ('nanu_interaction', 'Nanu Interaction'), ('reward_claim', 'Reward Claim')], max_length=50)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('details', models.JSONField(blank=True, help_text='Additional activity details', null=True)),
                ('was_successful', models.BooleanField(help_text='Whether the activity was completed successfully', null=True)),
                ('difficulty_reported', models.PositiveSmallIntegerField(blank=True, help_text='Student-reported difficulty (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('needed_help', models.BooleanField(default=False)),
                ('helper_type', models.CharField(blank=True, choices=[('parent', 'Parent'), ('teacher', 'Teacher'), ('nanu', 'Nanu Assistant'), ('peer', 'Classmate')], max_length=20)),
                ('voice_notes', models.FileField(blank=True, upload_to='activity/voice/')),
                ('voice_notes_transcript', models.TextField(blank=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to='learning.course')),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activity_logs', to='repository.resource')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('term', models.CharField(max_length=20)),
                ('day_of_week', models.PositiveSmallIntegerField(help_text='0=Monday, 6=Sunday')),
                ('start_time', models.TimeField()),
                ('duration_minutes', models.PositiveIntegerField()),
                ('room', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('voice_reminder', models.TextField(blank=True, help_text='Custom voice reminder for this schedule')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='learning.course')),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='CourseSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField()),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('voice_announcement', models.TextField(blank=True, help_text='Custom voice announcement for this session')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='learning.courseschedule')),
            ],
            options={
                'ordering': ['-date', '-actual_start'],
            },
        ),
        migrations.CreateModel(
            name='LearningGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('term', models.CharField(max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('voice_description', models.TextField(blank=True, help_text='Simple description for TTS')),
                ('target_date', models.DateField(blank=True, null=True)),
                ('progress_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('needs_revision', 'Needs Revision')], default='not_started', max_length=20)),
                ('parent_notified', models.BooleanField(default=False)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_goals', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_goals', to='learning.course')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_goals', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='learning_goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('voice_description', models.TextField(blank=True, help_text='Simple description for TTS')),
                ('order', models.PositiveIntegerField(default=0)),
                ('required_points', models.PositiveIntegerField(default=0)),
                ('required_attendance', models.PositiveIntegerField(default=0, help_text='Required attendance percentage')),
                ('custom_criteria', models.JSONField(blank=True, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('completion_recording', models.FileField(blank=True, upload_to='milestones/voice/')),
                ('completion_transcript', models.TextField(blank=True)),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='learning.learninggoal')),
                ('required_resources', models.ManyToManyField(blank=True, related_name='required_for_milestones', to='repository.resource')),
                ('verified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_milestones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['goal', 'order'],
            },
        ),
        migrations.CreateModel(
            name='GoalReflection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('voice_recording', models.FileField(blank=True, upload_to='reflections/voice/')),
                ('transcript', models.TextField(blank=True)),
                ('mood', models.CharField(choices=[('happy', 'Happy'), ('proud', 'Proud'), ('worried', 'Worried'), ('confused', 'Confused'), ('determined', 'Determined')], max_length=20)),
                ('needs_help', models.BooleanField(default=False)),
                ('help_type_requested', models.CharField(blank=True, choices=[('explanation', 'Better Explanation'), ('practice', 'More Practice'), ('different_method', 'Different Learning Method'), ('teacher_help', 'Teacher Help'), ('parent_help', 'Parent Help')], max_length=20)),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reflections', to='learning.learninggoal')),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reflections', to='learning.learningmilestone')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningSupport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('support_type', models.CharField(choices=[('guidance', 'Additional Guidance'), ('resources', 'Extra Resources'), ('practice', 'Practice Session'), ('accommodation', 'Learning Accommodation'), ('intervention', 'Teacher Intervention')], max_length=20)),
                ('description', models.TextField()),
                ('voice_notes', models.FileField(blank=True, upload_to='support/voice/')),
                ('notes_transcript', models.TextField(blank=True)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('outcome_notes', models.TextField(blank=True)),
                ('parent_notified', models.BooleanField(default=False)),
                ('parent_feedback', models.TextField(blank=True)),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_records', to='learning.learningmilestone')),
                ('provided_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provided_support', to=settings.AUTH_USER_MODEL)),
                ('resources_provided', models.ManyToManyField(blank=True, related_name='used_in_support', to='repository.resource')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('points_earned', models.PositiveIntegerField()),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('term', models.CharField(help_text='Academic term when earned', max_length=20)),
                ('evidence', models.JSONField(blank=True, help_text='Supporting data for the achievement claim', null=True)),
                ('voice_feedback', models.TextField(blank=True, help_text='Custom voice message for this achievement instance')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_achievements', to='learning.achievement')),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_achievements', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CompletionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('completion_type', models.CharField(choices=[('self_marked', 'Self Marked'), ('auto_tracked', 'Automatically Tracked'), ('teacher_verified', 'Teacher Verified')], max_length=20)),
                ('score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('time_taken', models.PositiveIntegerField(blank=True, help_text='Time taken in minutes', null=True)),
                ('attempts', models.PositiveIntegerField(default=1)),
                ('voice_reflection', models.FileField(blank=True, upload_to='completion/voice/')),
                ('reflection_transcript', models.TextField(blank=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completion_records', to='learning.course')),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completion_records', to='repository.resource')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='completion_records', to=settings.AUTH_USER_MODEL)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completion_records', to='learning.unit')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_completions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-completed_at'],
                'unique_together': {('student', 'course', 'unit', 'resource')},
            },
        ),
        migrations.CreateModel(
            name='RewardClaim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('points_spent', models.PositiveIntegerField()),
                ('reward_description', models.TextField()),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('term', models.CharField(max_length=20)),
                ('voice_confirmation', models.TextField(blank=True, help_text='Custom voice message when reward is claimed')),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_rewards', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='reward_claims', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'constraints': [models.CheckConstraint(condition=models.Q(('points_spent__gt', 0)), name='points_spent_positive')],
            },
        ),
        migrations.CreateModel(
            name='SessionReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scheduled_for', models.DateTimeField()),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('reminder_type', models.CharField(choices=[('day_before', 'Day Before'), ('morning_of', 'Morning Of'), ('hour_before', 'Hour Before')], max_length=20)),
                ('voice_message', models.TextField(blank=True, help_text='Custom voice message for this reminder')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='learning.coursesession')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='session_reminders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-scheduled_for'],
                'unique_together': {('session', 'student', 'reminder_type')},
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('term', models.CharField(max_length=20)),
                ('completion_percentage', models.FloatField(default=0, help_text='Overall completion percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('activity_score', models.FloatField(default=0, help_text='Engagement and activity score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_time_spent', models.PositiveIntegerField(default=0, help_text='Total time spent in minutes')),
                ('last_activity_at', models.DateTimeField(null=True)),
                ('consecutive_days', models.PositiveIntegerField(default=0, help_text='Consecutive days of activity')),
                ('latest_voice_feedback', models.FileField(blank=True, upload_to='progress/voice/')),
                ('latest_feedback_transcript', models.TextField(blank=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='learning.course')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='progress_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-term', 'student__username'],
                'unique_together': {('student', 'course', 'term')},
            },
        ),
        migrations.CreateModel(
            name='TermProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('term', models.CharField(max_length=20)),
                ('total_points_earned', models.PositiveIntegerField(default=0)),
                ('total_points_spent', models.PositiveIntegerField(default=0)),
                ('rewards_claimed_count', models.PositiveIntegerField(default=0)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='term_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-term'],
                'unique_together': {('student', 'term')},
            },
        ),
        migrations.CreateModel(
            name='VoiceAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('voice_recording', models.FileField(blank=True, upload_to='attendance/voice/')),
                ('transcript', models.TextField(blank=True)),
                ('confidence_score', models.FloatField(help_text='Voice recognition confidence (0-1)', null=True)),
                ('location_data', models.JSONField(blank=True, help_text='Optional location verification data', null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voice_attendance', to='learning.coursesession')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='voice_attendance', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_attendance', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('student', 'session')},
            },
        ),
    ]
